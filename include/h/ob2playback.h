#pragma once

#include "ob2types.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * \if English
 *
 * @brief Create a playback
 * @brief For playback of video files generated by the record
 *
 * @attention After successfully creating a playback, caller need to call @ref ob2_playback_close to close the playback when it is no longer needed, otherwise
 * it will cause a memory leak.
 * @attention The playback creation will open the recorded file, which will then be inaccessible through other programs until the playback is closed.
 *
 * @param[in] file_path Recorded file path
 * @param[out] status Output function execution status.
 * @return ob2_playback_t Return the handle of playback.
 *
 * \else
 *
 * @brief 创建回放器
 * @brief 用于录制器生成的录像文件的播放
 *
 * @attention 成功创建回放器后，不再需要使用时，需要调用 @ref ob2_playback_close 关闭回放器，否则会导致内存泄漏。
 * @attention 回放器创建会将录制文件打开，此时通过其他程序将无法访问该文件，直到关闭回放器
 *
 * @param[in] file_path 录制文件路径
 * @param[out] status 返回函数调用状态
 * @return ob2_playback_t 返回回放器句柄
 *
 * \endif
 */
ob2_playback_t ob2_playback_create(const char *file_path, ob2_status_t *status);

/**
 * \if English
 *
 * @brief Close the playback
 *
 * @param[in] playback_handle The handle of playback.
 * @param[out] status Output function execution status.
 *
 * \else
 *
 * @brief 关闭回放器
 *
 * @param[in] playback_handle 回放器句柄
 * @param[out] status 返回函数调用状态
 *
 * \endif
 */
void ob2_playback_close(ob2_playback_t playback_handle, ob2_status_t *status);

/**
 * \if English
 *
 * @brief Get recorded device information
 *
 * @attention If the recording file was recorded without writing device information, a call to this function will return ::OB2_STATUS_RUNTIME_ERROR via
 * @status.
 *
 * @param[in] playback_handle Handle of playback
 * @param[out] status Output function execution status.
 * @return ob2_device_info_t Return device information
 *
 * \else
 *
 * @brief 获取已录制的设备信息
 *
 * @attention 如果录制文件录制时未写入设备信息，调用本接口将通过 @status 返回 ::OB2_STATUS_RUNTIME_ERROR 。
 *
 * @param[in] playback_handle 回放器句柄
 * @param[out] status 返回函数调用状态
 * @return ob2_device_info_t 返回设备信息
 *
 * \endif
 */
ob2_device_info_t ob2_playback_get_device_info(ob2_playback_t playback_handle, ob2_status_t *status);

/**
 * \if English
 *
 * @brief get cameras calibration parameters
 *
 * @attention If the recording file was recorded without writing the cameras calibration parameters, a call to this interface will return
 * ::OB2_STATUS_RUNTIME_ERROR via @status.
 *
 * @param[in] playback_handle Handle of playback
 * @param[out] status Output function execution status.
 * @return ob2_cameras_calibration_t  Return cameras calibration parameters
 *
 * \else
 *
 * @brief 获取相机标定参数
 *
 * @attention 如果录制文件录制时未写入相机标定参数，调用本接口将通过 @status 返回 ::OB2_STATUS_RUNTIME_ERROR 。
 *
 * @param[in] playback_handle 回放器句柄
 * @param[out] status 返回函数调用状态
 * @return ob2_cameras_calibration_t  返回相机标定参数
 *
 * \endif
 */
ob2_cameras_calibration_t ob2_playback_get_cameras_calibration(ob2_playback_t playback_handle, ob2_status_t *status);

/**
 * \if English
 *
 * @brief start playback
 *
 * @attention Do not execute too many tasks within the callback function, as this may take too long and cause the SDK internal cache to overflow and discard
 * data.
 *
 * @param[in] playback_handle Handle of playback
 * @param[in] capture_callback  capture callback function
 * @param[in] imu_sample_callback imu_sample callback function（Not currently supported, please pass NULL）
 * @param[in] state_callback  Playback status callback  function
 * @param[in] user_data User-defined data to be returned as is when capture_callback, imu_sample_callback, state_callback are called
 * @param[out] status Output function execution status.
 *
 * \else
 *
 * @brief 开启回放
 *
 * @attention 在回调函数内不要执行太多任务，否则执行时间过长会导致 SDK 内部缓存溢出而丢弃数据。
 *
 * @param[in] playback_handle 回放器句柄
 * @param[in] capture_callback  capture 回调
 * @param[in] imu_sample_callback imu_sample 回调（当前不支持，请传入 NULL）
 * @param[in] state_callback  回放状态回调
 * @param[in] user_data 用户自定义数据，待调用 capture_callback、imu_sample_callback、state_callback 时将原样返回
 * @param[out] status 返回函数调用状态
 *
 * \endif
 */
void ob2_playback_start(ob2_playback_t playback_handle, ob2_capture_cb_t capture_callback, ob2_imu_sample_cb_t imu_sample_callback,
                        ob2_playback_state_cb_t state_callback, void *user_data, ob2_status_t *status);

/**
 * \if English
 *
 * @brief stop playback
 *
 * @param[in] playback_handle Handle of playback
 * @param[out] status 返回函数调用状态
 *
 * \else
 *
 * @brief 停止回放
 *
 * @param[in] playback_handle 回放器句柄
 * @param[out] status 返回函数调用状态
 *
 * \endif
 */
void ob2_playback_stop(ob2_playback_t playback_handle, ob2_status_t *status);

#ifdef __cplusplus
}
#endif